# -*- coding: utf-8 -*-
"""UTSA 2019 Oct - Part3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-9TxSum3oCAXSDdfnDdgxkRZtuE5udaL
"""

!rm -rf utsa-workshop-20191024/
!git clone https://github.com/marco-antonio-villegas/utsa-workshop-20191024

!ls utsa-workshop-20191024/data

import pandas as pd
df = pd.read_csv("utsa-workshop-20191024/data/financial_min_data.csv", encoding = "ISO-8859-1")
df.head(2)

cols = ['fyear', 'gvkey', 'yrff', 'ffind', 'xrd', 'capx', 'aqc', 'sppe', 'at', 'revt', 'oancf', 'ch', 'tqw', 'fcfotaw', 'cfotaw']
cols_desc = [
 ('fyear', 'Data Year - Fiscal'),
 ('gvkey', 'Global Company Key'),
 ('yrff', ''),
 ('ffind', ''),
 ('xrd', 'Research and Development Expense'),
 ('capx', 'Capital Expenditures'),
 ('aqc', 'Acquisitions'),
 ('sppe', 'Sale of Property'),
 ('at', 'Assets - Total'),
 ('revt', 'Revenue - Total'),
 ('oancf', 'Operating Activities - Net Cash Flow'),
 ('ch', 'Cash')]

"""# Investment variables (Biddle et al. 2009)"""

df = df.fillna(0)
dfg = df.groupby('gvkey').apply(lambda x: x.sort_values(["fyear"]))
# lag of Total Assets
dfg['atB1'] = dfg['at'].shift(1)
# lag of Revenew
dfg['revtB1'] = dfg['revt'].shift(1)
dfg.head()

dfg['investment'] = (dfg.capx + dfg.xrd + dfg.aqc - dfg.sppe) / dfg.atB1
dfg['sales_growth'] = (dfg.revt - dfg.revtB1) / dfg.revtB1
dfg.head()

cdata = dfg[dfg.gvkey==1004.0]
ax = cdata.plot.line('fyear', 'investment')
cdata.plot.line('fyear', 'sales_growth', ax=ax)
cdata.plot.line('fyear', 'tqw', ax=ax)
cdata.plot.line('fyear', 'fcfotaw', ax=ax)

# back shift sales growth
dfg['sales_growthB1'] = dfg['sales_growth'].shift(1)

cdata = dfg[dfg.gvkey==1004.0]
ax = cdata.plot.line('fyear', 'investment')
cdata.plot.line('fyear', 'sales_growthB1', ax=ax)
cdata.plot.line('fyear', 'tqw', ax=ax)
cdata.plot.line('fyear', 'fcfotaw', ax=ax)

import numpy as np
from sklearn.linear_model import LinearRegression
regs = list()
dfg = dfg.replace([np.inf, -np.inf], np.nan)
for ff, gdata in dfg.reset_index(drop=True).groupby('ffind'):
  scores = []
  ign = 0
  inc = 0
  for gvkey, ggdata in gdata.groupby('gvkey'):
    ggdata = ggdata.dropna(subset=['sales_growthB1','investment', 'tqw', 'fcfotaw'], how='any')
    X_ = ggdata[['sales_growthB1', 'tqw', 'fcfotaw']]
    y_ = ggdata[['investment']]
    if X_.shape[0] > 5:
      try:
        reg = LinearRegression().fit(X_, y_)
      except Exception as e:
        print(X_, y_)
        raise(e)
      regs.append((ff, gvkey, reg))
      scores.append(reg.score(X_, y_))
    else:
      ign += 1
  if len(scores):
    print("[FF-industry %d] mean %2.2f std %2.2f (ign %d, inc %d)"%(int(ff), np.mean(scores),np.std(scores), ign, len(scores)))

"""## Random Forest for gvkey"""

import numpy as np
from sklearn.ensemble import RandomForestRegressor
regs = list()
dfg = dfg.replace([np.inf, -np.inf], np.nan)
for ff, gdata in dfg.reset_index(drop=True).groupby('ffind'):
  scores = []
  ign = 0
  inc = 0
  for gvkey, ggdata in gdata.groupby('gvkey'):
    ggdata = ggdata.dropna(subset=['sales_growthB1','investment', 'tqw', 'fcfotaw'], how='any')
    X_ = ggdata[['sales_growthB1', 'tqw', 'fcfotaw']]
    y_ = ggdata.investment.ravel()
    if X_.shape[0] > 5:
      reg = RandomForestRegressor(n_estimators=10, min_samples_split=4).fit(X_, y_)
      regs.append((ff, gvkey, reg))
      scores.append(reg.score(X_, y_))
    else:
      ign += 1
  if len(scores):
    print("[FF-industry %d] mean %2.2f std %2.2f (ign %d, inc %d)"%(int(ff), np.mean(scores),np.std(scores), ign, len(scores)))



"""# SVM"""

import numpy as np
from sklearn.svm import SVR
regs = list()
dfg = dfg.replace([np.inf, -np.inf], np.nan)
for ff, gdata in dfg.reset_index(drop=True).groupby('ffind'):
  scores = []
  ign = 0
  inc = 0
  for gvkey, ggdata in gdata.groupby('gvkey'):
    ggdata = ggdata.dropna(subset=['sales_growthB1','investment', 'tqw', 'fcfotaw'], how='any')
    X_ = ggdata[['sales_growthB1', 'tqw', 'fcfotaw']]
    y_ = ggdata.investment.ravel()
    if X_.shape[0] > 5:
      reg = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.01).fit(X_, y_)
      regs.append((ff, gvkey, reg))
      scores.append(reg.score(X_, y_))
    else:
      ign += 1
  if len(scores):
    print("[FF-industry %d] mean %2.2f std %2.2f (ign %d, inc %d)"%(int(ff), np.mean(scores),np.std(scores), ign, len(scores)))

